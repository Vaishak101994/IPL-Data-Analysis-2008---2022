Create database IPL
USE IPL

CREATE OR REPLACE TABLE batting (
season INT,
match_id INT,
match_name VARCHAR2(100),
home_team VARCHAR2(100),
away_team VARCHAR2(100),
venue VARCHAR2(100),
city VARCHAR2(100),
country VARCHAR2(100),
current_innings VARCHAR2(100),
innings_id INT,
name VARCHAR2(100),
fullName VARCHAR2(100),
runs INT,
ballsFaced INT,
minutes INT,
fours INT,"IPL"
sixes INT,
strikeRate DECIMAL(20,2),
captain VARCHAR2(100),
isNotOut VARCHAR2(100),
runningOver DECIMAL(20,2)
)

CREATE OR REPLACE TABLE bowling (
season VARCHAR2(100),
match_id INT,
match_name VARCHAR2(100),
home_team VARCHAR2(100),
away_team VARCHAR2(100),
bowling_team VARCHAR2(100),
venue VARCHAR2(100),
city VARCHAR2(100),
country VARCHAR2(100),
innings_id INT,
name VARCHAR2(100),
fullName VARCHAR2(100),
overs DECIMAL(20,1),
maidens INT,
conceded INT,
wickets INT,
economyRate DECIMAL(20,2),
dots INT,
foursConceded INT,
sixesConceded INT,
wides INT,
noballs INT,
captain VARCHAR2(100)
)

CREATE OR REPLACE TABLE details (
comment_id INT,
season INT,
match_id INT,
match_name VARCHAR2(100),
home_team VARCHAR2(100),
away_team VARCHAR2(100),
current_innings VARCHAR2(100),
innings_id INT,
over DECIMAL(20,2),
ball INT,
runs INT,
shortText VARCHAR2(100),
isBoundary VARCHAR2(100),
isWide VARCHAR2(100),
isNoball VARCHAR2(100),
batsman1_id INT,
batsman1_name VARCHAR2(100),
batsman1_runs INT,
batsman1_balls INT,
bowler1_id INT,
bowler1_name VARCHAR2(100),
bowler1_overs DECIMAL(20,2),
bowler1_maidens INT,
bowler1_runs INT,
bowler1_wkts INT,
batsman2_id INT,
batsman2_name VARCHAR2(100),
batsman2_runs INT,
batsman2_balls INT,
bowler2_id INT,
bowler2_name VARCHAR2(100),
bowler2_overs DECIMAL(20,2),
bowler2_maidens INT,
bowler2_runs INT,
bowler2_wkts INT,
wicket_id INT,
wkt_batsman_name VARCHAR2(100),
wkt_bowler_name VARCHAR2(100),
wkt_batsman_runs INT,
wkt_batsman_balls INT,
wkt_text VARCHAR2(100),
isRetiredHurt VARCHAR2(100)
)

CREATE OR REPLACE TABLE summary (
season INT,
id INT,
name VARCHAR2(100),
short_name VARCHAR2(100),
description VARCHAR2(100),
home_team VARCHAR2(100),
away_team VARCHAR2(100),
toss_won VARCHAR2(100),
decision VARCHAR2(100),
`1st_inning_runs` INT,
`1st_inning_wickets` INT,
`2nd_inning_runs` INT,
`2nd_inning_wickets` INT,
home_runs INT,
home_wickets INT,
away_runs INT,
away_wickets INT,
winner VARCHAR2(100),
result VARCHAR2(100),
venue_id INT,
venue_name VARCHAR2(100),
home_captain VARCHAR2(100),
away_captain VARCHAR2(100),
pom VARCHAR2(100),
points VARCHAR2(100),
super_over VARCHAR2(100),
home_overs DECIMAL(20,2),
home_boundaries INT,
away_overs DECIMAL(20,2),
away_boundaries INT,
match_days VARCHAR2(100)
)

SELECT * FROM batting
SELECT * FROM bowling
SELECT * FROM details
SELECT * FROM summary

CREATE OR REPLACE TABLE BOWLING1 AS
SELECT season,match_id,match_name,home_team,away_team,bowling_team,venue,city,country,innings_id,name,fullName,overs,LEFT(OVERS, CHARINDEX('.',OVERS)-1) AS OVER,
RIGHT(OVERS, CHARINDEX('.',OVERS)-1) AS BALLS,       //SELECT ItemName, Price, LEFT(Price,CHARINDEX('.',Price)-1) AS Rupees,
maidens,conceded,wickets,economyRate,dots,foursConceded,sixesConceded,wides,noballs,captain FROM bowling

SELECT * FROM BOWLING1

//OVERALL BATTING STATS 2008-2022

CREATE OR REPLACE TABLE BATTING_STATS AS
SELECT NAME, FULLNAME, INNINGS, RUNS, BALLSFACED, HIGHEST_SCORE, MINUTES, SIXES, FOURS, CAST(STRIKERATE AS DECIMAL(4,1)) AS STRIKERATE
FROM
(
SELECT NAME, FULLNAME, INNINGS, RUNS, BALLSFACED, HIGHEST_SCORE, MINUTES, SIXES, FOURS,
                CASE
                    WHEN BALLSFACED = 0
                    THEN 0
                    ELSE RUNS / BALLSFACED * 100
                END AS STRIKERATE
                FROM 
(SELECT  name,fullName, COUNT(NAME) AS INNINGS, sum(Runs) AS RUNS, sum(BALLSFACED) AS BALLSFACED, MAX(RUNS) AS HIGHEST_SCORE, 
sum(minutes) AS MINUTES, SUM(SIXES) AS SIXES, SUM(FOURS) AS FOURS
from batting group by name, fullName  Order by runs DESC))

CREATE OR REPLACE TABLE OUT_NOTOUTS AS
SELECT NAME, FULLNAME, SUM(NOTOUTS) AS NOTOUTS, (COUNT(NAME) - SUM(NOTOUTS)) AS OUTS
FROM
(
SELECT NAME, FULLNAME,
                CASE
                    WHEN ISNOTOUT = 'TRUE'
                    THEN 1
                    ELSE 0
                END AS NOTOUTS    
FROM BATTING) GROUP BY NAME, FULLNAME

CREATE OR REPLACE TABLE CENTURIES AS
SELECT distinct(name) AS NAME,fullName, COUNT(RUNS) AS CENTURIES FROM batting WHERE RUNS >= 100 GROUP BY name, fullName ORDER BY CENTURIES DESC

CREATE OR REPLACE TABLE FIFTIES AS
SELECT DISTINCT(NAME) AS NAME, FULLNAME, COUNT(RUNS) AS FIFTIES FROM BATTING WHERE RUNS >= 50 AND RUNS < 100 GROUP BY name, fullName ORDER BY FIFTIES DESC

CREATE OR REPLACE TABLE BATTING_STATISTICS AS
SELECT NAME, FULLNAME, INNINGS, RUNS, BALLSFACED,CAST(AVERAGE AS DECIMAL(4,1)) AS AVERAGE, HIGHEST_SCORE, MINUTES, SIXES, FOURS, STRIKERATE, CENTURIES, FIFTIES, NOTOUTS
FROM
(
SELECT NAME, FULLNAME, INNINGS, RUNS, BALLSFACED, HIGHEST_SCORE, MINUTES, SIXES, FOURS, STRIKERATE, CENTURIES, FIFTIES, NOTOUTS,
                  CASE
                    WHEN OUTS = 0
                    THEN 0
                    ELSE RUNS / OUTS
                  END AS AVERAGE
FROM
(
SELECT B.NAME, B.FULLNAME, B.INNINGS,B.RUNS,B.BALLSFACED, B.HIGHEST_SCORE,B.MINUTES,B.SIXES,B.FOURS,B.STRIKERATE,C.CENTURIES,F.FIFTIES, O.NOTOUTS, O.OUTS FROM BATTING_STATS B
LEFT JOIN CENTURIES C ON B.NAME = C.NAME
LEFT JOIN FIFTIES F ON B.NAME = F.NAME
LEFT JOIN OUT_NOTOUTS O ON B.NAME = O.NAME
))

SELECT * FROM BATTING_STATISTICS

//OVERALL BOWLING STATS 2008-2022

CREATE OR REPLACE TABLE BOWLING_STATS AS
SELECT DISTINCT(NAME), fullName, SUM(OVER) AS OVERS,sum(over)*6 as DELIVERIES,SUM(BALLS) AS REMAINING_DELIVERIES,
(sum(over)*6+SUM(BALLS)) AS TOTAL_DELIVERIES,MOD((sum(over)*6+SUM(BALLS)),6) AS REMAINING_BALLS,
SUM(MAIDENS) AS MAIDENS, SUM(CONCEDED) AS RUNS_CONCEDED,SUM(WICKETS) AS WICKETS, 
SUM(CONCEDED)/(sum(over)*6+SUM(BALLS))*6 AS ECONOMYRATE,SUM(DOTS) DOTS, SUM(FOURSCONCEDED) AS FOURS_CONCEDED,
SUM(SIXESCONCEDED) AS SIXES_CONCEDED,SUM(WIDES) AS WIDES, SUM(NOBALLS) AS NOBALLS
FROM bowling1 GROUP BY NAME,fullName ORDER BY WICKETS DESC 

SELECT * FROM BOWLING_STATS

CREATE OR REPLACE TABLE BOWLING_STATISTICS AS
SELECT NAME, FULLNAME, TOTAL_DELIVERIES,(TOTAL_DELIVERIES-REMAINING_BALLS)/6 AS TOTAL_OVERS, 
REMAINING_BALLS, MAIDENS, RUNS_CONCEDED, WICKETS,ECONOMYRATE, DOTS, FOURS_CONCEDED, SIXES_CONCEDED, WIDES, NOBALLS
FROM BOWLING_STATS

SELECT * FROM BOWLING_STATISTICS

DELETE FROM BOWLING_STATISTICS WHERE WICKETS = 0;

ALTER TABLE BOWLING_STATISTICS
ADD COLUMN STRIKERATE DECIMAL(6,2) ;

UPDATE BOWLING_STATISTICS
SET STRIKERATE = (RUNS_CONCEDED/WICKETS)
    IF STRIKERATE = 0
    THEN 'NULL'
    END;

SELECT * FROM BOWLING_STATISTICS
DROP TABLE BOWLING_STATISTICS

CREATE OR REPLACE TABLE BOWLING_STATISTICS AS
SELECT NAME, FULLNAME, TOTAL_DELIVERIES, TOTAL_OVERS, REMAINING_BALLS, MAIDENS, RUNS_CONCEDED, WICKETS, CAST(BOWLING_AVERAGE AS DECIMAL(4,1)) AS BOWLING_AVERAGE,
CAST(ECONOMYRATE AS DECIMAL(4,1)) AS ECONOMYRATE, CAST(BOWLING_STRIKERATE AS DECIMAL(4,1)) AS BOWLING_STRIKERATE, DOTS, FOURS_CONCEDED, SIXES_CONCEDED, WIDES, NOBALLS 
FROM(
SELECT NAME, FULLNAME, TOTAL_DELIVERIES,(TOTAL_DELIVERIES-REMAINING_BALLS)/6 AS TOTAL_OVERS, 
REMAINING_BALLS, MAIDENS, RUNS_CONCEDED, WICKETS,ECONOMYRATE, DOTS, FOURS_CONCEDED, SIXES_CONCEDED, WIDES, NOBALLS,
                    CASE
                        WHEN WICKETS = 0
                        THEN 0
                        ELSE RUNS_CONCEDED / WICKETS
                    END AS BOWLING_AVERAGE,
                    CASE
                        WHEN WICKETS = 0
                        THEN 0
                        ELSE TOTAL_DELIVERIES / WICKETS
                    END AS BOWLING_STRIKERATE
FROM BOWLING_STATS)

SELECT * FROM BOWLING_STATISTICS

// IPL 2008-2022 TEAM ANALYSIS

CREATE OR REPLACE TABLE FIRST_INNINGS AS
SELECT TOSS_WON AS TEAM, MAX(`1ST_INNING_RUNS`) AS MAX_FIRST_INNINGS_TOTAL FROM
(SELECT TOSS_WON, DECISION, `1ST_INNING_RUNS` FROM SUMMARY WHERE DECISION = 'BAT FIRST') GROUP BY TEAM

CREATE OR REPLACE TABLE SECOND_INNINGS AS
SELECT TOSS_WON AS TEAM, MAX(`2ND_INNING_RUNS`) AS MAX_SECOND_INNINGS_TOTAL FROM
(SELECT TOSS_WON, DECISION, `2ND_INNING_RUNS` FROM SUMMARY WHERE DECISION = 'BOWL FIRST') GROUP BY TEAM

CREATE OR REPLACE TABLE HOME_WINS AS 
SELECT DISTINCT(TEAM) AS TEAM, CAST(COUNT(TEAM)*0.5 AS DECIMAL(4,0)) AS HOME_MATCHES, CAST(SUM(HOME_WINS)*0.5 AS DECIMAL(4,0)) AS HOME_WINS, 
MAX(HOME_RUNS) AS MAX_HOME_TOTAL, MIN(HOME_RUNS) AS MIN_HOME_TOTAL
FROM
(
SELECT HOME_TEAM AS TEAM, HOME_RUNS,
CASE 
    WHEN WINNER = HOME_TEAM
    THEN 1
    ELSE 0
    END AS HOME_WINS
FROM summary
) WHERE HOME_RUNS > 0 GROUP BY TEAM

SELECT * FROM HOME_WINS

CREATE OR REPLACE TABLE AWAY_WINS AS 
SELECT DISTINCT(TEAM) AS TEAM, CAST(COUNT(TEAM)*0.5 AS DECIMAL(4,0)) AS AWAY_MATCHES, CAST(SUM(AWAY_WINS)*0.5 AS DECIMAL(4,0)) AS AWAY_WINS, 
MAX(AWAY_RUNS) AS MAX_AWAY_TOTAL, MIN(AWAY_RUNS) AS MIN_AWAY_TOTAL
FROM
(
SELECT AWAY_TEAM AS TEAM, AWAY_RUNS,
CASE 
    WHEN WINNER = AWAY_TEAM
    THEN 1
    ELSE 0
    END AS AWAY_WINS
FROM summary
) WHERE AWAY_RUNS > 0 GROUP BY TEAM

SELECT * FROM AWAY_WINS

CREATE OR REPLACE TABLE SIXES AS
SELECT DISTINCT(CURRENT_INNINGS) AS TEAMS, COUNT(RUNS) AS SIXES FROM details WHERE RUNS = 6 GROUP BY CURRENT_INNINGS

CREATE OR REPLACE TABLE FOURS AS
SELECT DISTINCT(CURRENT_INNINGS) AS TEAMS, COUNT(RUNS) AS FOURS FROM details WHERE RUNS = 4 GROUP BY CURRENT_INNINGS

SELECT 
SELECT HOME_TEAM AS TEAMS, HOME_TEAM AS HOME_MATCHES, AWAY_TEAM AS AWAY_MATCHES,
        CASE WHEN TOSS_WON = HOME_TEAM 
             THEN 1
             ELSE 0
        END AS HOME_TOSS_WON ,
        CASE WHEN  TOSS_WON =  AWAY_TEAM
            THEN 1
            ELSE 0
        END AS AWAY_TEAM_WON 
FROM SUMMARY                                                      
                                                              

CREATE OR REPLACE TABLE TEAM_DETAILS AS
SELECT TEAM, TOTAL_MATCHES, TOTAL_WINS, CAST(TOTAL_WINS / TOTAL_MATCHES * 100 AS DECIMAL(4,1)) AS WIN_PERCENTAGE, HOME_MATCHES, AWAY_MATCHES, HOME_WINS, AWAY_WINS,
MAX_HOME_TOTAL, MIN_HOME_TOTAL, MAX_AWAY_TOTAL, MIN_AWAY_TOTAL, MAX_FIRST_INNINGS_TOTAL, MAX_SECOND_INNINGS_TOTAL, SIXES, FOURS
FROM
(SELECT H.TEAM, H.HOME_MATCHES, A.AWAY_MATCHES, H.HOME_MATCHES + A.AWAY_MATCHES AS TOTAL_MATCHES, O.MAX_FIRST_INNINGS_TOTAL, I.MAX_SECOND_INNINGS_TOTAL,
 H.MAX_HOME_TOTAL, H.MIN_HOME_TOTAL, A.MAX_AWAY_TOTAL, A.MIN_AWAY_TOTAL, H.HOME_WINS, A.AWAY_WINS, H.HOME_WINS + A.AWAY_WINS AS TOTAL_WINS, S.SIXES, F.FOURS  
FROM HOME_WINS H 
LEFT JOIN AWAY_WINS A ON H.TEAM = A.TEAM 
LEFT JOIN FIRST_INNINGS O ON H.TEAM = O.TEAM
LEFT JOIN SECOND_INNINGS I ON H.TEAM = I.TEAM
LEFT JOIN SIXES S ON H.TEAM = S.TEAMS
LEFT JOIN FOURS F ON H.TEAM = F.TEAMS) ORDER BY TEAM

SELECT * FROM TEAM_DETAILS

// CAPTAIN OVERALL STATS 2008-2022

CREATE OR REPLACE TABLE CAPTAIN_BATSTAT AS
SELECT NAME, FULLNAME, CAP_BAT_INNINGS, RUNS, BALLSFACED, CAST(AVERAGE AS DECIMAL(4,1)) AS AVERAGE, CAP_HIGHEST_SCORE, MINUTES, SIXES, FOURS, NOTOUTS, STRIKERATE
FROM
(
SELECT NAME, FULLNAME, CAP_BAT_INNINGS, RUNS, BALLSFACED, CAP_HIGHEST_SCORE, MINUTES, SIXES, FOURS, NOTOUTS, CAST(STRIKERATE AS DECIMAL(4,1)) AS STRIKERATE,
                    CASE
                        WHEN OUTS = 0
                        THEN 0
                        ELSE RUNS / OUTS
                    END AS AVERAGE
FROM
(
SELECT NAME, FULLNAME, COUNT(NAME) AS CAP_BAT_INNINGS, SUM(RUNS) AS RUNS, SUM(BALLSFACED) AS BALLSFACED, MAX(RUNS) AS CAP_HIGHEST_SCORE,
SUM(MINUTES) AS MINUTES, SUM(SIXES)  AS SIXES, SUM(FOURS) AS FOURS, SUM(NOTOUTS) AS NOTOUTS, COUNT(NAME) - SUM(NOTOUTS) AS OUTS,
                    CASE
                        WHEN SUM(BALLSFACED) = 0
                        THEN 0
                        ELSE SUM(RUNS) / SUM(BALLSFACED) * 100
                    END AS STRIKERATE
FROM
(
SELECT NAME, FULLNAME, RUNS, BALLSFACED, MINUTES, SIXES, FOURS,
                    CASE
                        WHEN ISNOTOUT = TRUE
                        THEN 1
                        ELSE 0
                    END AS NOTOUTS
FROM batting WHERE CAPTAIN = 'TRUE' 
) GROUP BY NAME, FULLNAME ORDER BY NAME, FULLNAME
) )

SELECT * FROM CAPTAIN_BATSTAT

CREATE OR REPLACE TABLE CAPTAIN_BOWLSTAT AS
SELECT DISTINCT(NAME), fullName,COUNT(CAPTAIN) AS BOWL_INNINGS_AS_CAPTAIN, SUM(OVER) AS OVERS,sum(over)*6 as DELIVERIES,SUM(BALLS) AS REMAINING_DELIVERIES,
(sum(over)*6+SUM(BALLS)) AS TOTAL_DELIVERIES,MOD((sum(over)*6+SUM(BALLS)),6) AS REMAINING_BALLS,
SUM(MAIDENS) AS MAIDENS, SUM(CONCEDED) AS RUNS_CONCEDED,SUM(WICKETS) AS WICKETS, 
SUM(CONCEDED)/(sum(over)*6+SUM(BALLS))*6 AS ECONOMYRATE,SUM(DOTS) DOTS, SUM(FOURSCONCEDED) AS FOURS_CONCEDED,
SUM(SIXESCONCEDED) AS SIXES_CONCEDED,SUM(WIDES) AS WIDES, SUM(NOBALLS) AS NOBALLS
FROM bowling1 WHERE CAPTAIN = 'TRUE' GROUP BY NAME,fullName ORDER BY WICKETS DESC 

SELECT * FROM CAPTAIN_BOWLSTAT

CREATE OR REPLACE TABLE CAPTAIN_BOWLSTATS AS
SELECT NAME, FULLNAME,BOWL_INNINGS_AS_CAPTAIN, TOTAL_DELIVERIES, TOTAL_OVERS, REMAINING_BALLS, MAIDENS, RUNS_CONCEDED, WICKETS,
CAST(BOWLING_AVERAGE AS DECIMAL(4,1)) AS BOWLING_AVERAGE, ECONOMYRATE,CAST(BOWLING_STRIKERATE AS DECIMAL(4,1)) AS BOWLING_STRIKERATE, DOTS, FOURS_CONCEDED, SIXES_CONCEDED, WIDES, NOBALLS
FROM(
SELECT NAME, FULLNAME,BOWL_INNINGS_AS_CAPTAIN, TOTAL_DELIVERIES,(TOTAL_DELIVERIES-REMAINING_BALLS)/6 AS TOTAL_OVERS, 
REMAINING_BALLS, MAIDENS, RUNS_CONCEDED, WICKETS,CAST(ECONOMYRATE AS DECIMAL(4,1)) AS ECONOMYRATE ,
                CASE
                    WHEN WICKETS = 0
                        THEN 0
                        ELSE TOTAL_DELIVERIES / WICKETS
                END AS BOWLING_STRIKERATE,
DOTS, FOURS_CONCEDED, SIXES_CONCEDED, WIDES, NOBALLS,
                CASE
                    WHEN WICKETS = 0
                    THEN 0
                    ELSE RUNS_CONCEDED / WICKETS
                END AS BOWLING_AVERAGE
FROM CAPTAIN_BOWLSTAT )

SELECT * FROM CAPTAIN_BOWLSTATS

CREATE OR REPLACE TABLE IPL_CAPTAIN_STATS AS
SELECT B.* ,D.BOWL_INNINGS_AS_CAPTAIN, D.TOTAL_DELIVERIES, D.TOTAL_OVERS, D.REMAINING_BALLS,D.MAIDENS, D.RUNS_CONCEDED,
D.WICKETS,D.BOWLING_AVERAGE, D.ECONOMYRATE, D.BOWLING_STRIKERATE, D.DOTS, D.FOURS_CONCEDED, D.SIXES_CONCEDED, D.WIDES, D.NOBALLS FROM CAPTAIN_BATSTAT B
LEFT JOIN CAPTAIN_BOWLSTATS D ON B.NAME = D.NAME

SELECT * FROM IPL_CAPTAIN_STATS

//SEASON WISE IPL ANALYSIS//

//seasonwise batting analysis

CREATE OR REPLACE TABLE CENTURIES_SEASONWISE AS
SELECT SEASON,name AS NAME,fullName, COUNT(RUNS) AS CENTURIES FROM batting WHERE RUNS >= 100 GROUP BY name, fullName, SEASON ORDER BY SEASON DESC

CREATE OR REPLACE TABLE FIFTIES_SEASONWISE AS
SELECT SEASON, NAME, FULLNAME, COUNT(RUNS) AS FIFTIES FROM BATTING WHERE RUNS >= 50 AND RUNS < 100 GROUP BY name, fullName, SEASON ORDER BY SEASON DESC

CREATE OR REPLACE TABLE BATTING_STATS_SEASONWISE AS
SELECT SEASON, TEAM, INNINGS, NAME,FULLNAME, RUNS, BALLSFACED , MINUTES,HIGHEST_SCORE, CAST(AVERAGE AS DECIMAL(4,1)) AS AVERAGE, FOURS, SIXES, STRIKERATE, NOTOUTS, 
FIFTIES, CENTURIES  FROM 
(
SELECT SEASON,CURRENT_INNINGS AS TEAM, INNINGS, NAME,FULLNAME, RUNS, BALLSFACED , MINUTES,HIGHEST_SCORE, FOURS,SIXES,CAST(STRIKERATE AS DECIMAL(4,1)) AS STRIKERATE, NOTOUTS,
FIFTIES, CENTURIES,
        CASE 
            WHEN OUT_INNINGS = 0
            THEN 0000
            ELSE RUNS / OUT_INNINGS
            END AS AVERAGE        
FROM
    (
    SELECT SEASON,count(name) as INNINGS,CURRENT_INNINGS, NAME,FULLNAME, SUM(RUNS) AS RUNS,SUM(BALLSFACED) AS BALLSFACED, MAX(RUNS) AS HIGHEST_SCORE ,SUM(MINUTES) AS MINUTES,  
    SUM(FOURS) AS FOURS,SUM(SIXES) AS SIXES,(SUM(RUNS)/SUM(BALLSFACED))*100 AS STRIKERATE, SUM(NOTOUTS) AS NOTOUTS, count(name)-SUM(NOTOUTS) AS OUT_INNINGS,
    SUM(FIFTIES) AS FIFTIES, SUM(CENTURIES) AS CENTURIES     
FROM 
    (
      SELECT DENSE_RANK() OVER (PARTITION BY SEASON ORDER BY RUNS DESC) AS SL_NO , CURRENT_INNINGS,
      SEASON, NAME,fullName, RUNS, BALLSFACED,MINUTES,FOURS,SIXES,STRIKERATE,
        CASE
            WHEN ISNOTOUT = 'TRUE'
            THEN 1
            ELSE 0
        END AS NOTOUTS,
        CASE
            WHEN RUNS >= 50 AND RUNS < 100
            THEN 1
            ELSE 0
            END AS FIFTIES,
        CASE
            WHEN RUNS >= 100
            THEN 1
            ELSE 0
            END AS CENTURIES
FROM batting 
    ) 
WHERE BALLSFACED > 0 GROUP BY NAME,FULLNAME, SEASON, CURRENT_INNINGS ORDER BY SEASON DESC, RUNS DESC
    )  
    )
  
SELECT * FROM BATTING_STATS_SEASONWISE

//seasonwise BOWLING analysis

CREATE OR REPLACE TABLE BOWLING_STATS_SEASONWISE AS
SELECT SEASON,TEAM, INNINGS, FULLNAME, TOTAL_DELIVERIES, TOTAL_OVERS, REMAINING_BALLS, MAIDENS, RUNS_CONCEDED,  WICKETS, DOTS,
CAST(BOWLING_AVERAGE AS DECIMAL(4,1)) AS BOWLING_AVERAGE, ECONOMYRATE, CAST(BOWLING_STRIKE_RATE AS DECIMAL(4,1)) AS BOWLING_STRIKE_RATE,
FOURSCONCEDED, SIXESCONCEDED, WIDES, NOBALLS
FROM
(
SELECT SEASON,TEAM, INNINGS, FULLNAME, TOTAL_DELIVERIES, (TOTAL_DELIVERIES - REMAINING_BALLS) / 6 AS TOTAL_OVERS, REMAINING_BALLS, MAIDENS, RUNS_CONCEDED,  WICKETS, DOTS, 
CAST(ECONOMYRATE AS DECIMAL(3,1)) AS ECONOMYRATE, FOURSCONCEDED, SIXESCONCEDED, WIDES, NOBALLS,
            CASE
                WHEN WICKETS = 0
                THEN 0
                ELSE TOTAL_DELIVERIES / WICKETS
            END AS BOWLING_STRIKE_RATE,
            CASE
                WHEN WICKETS = 0
                THEN 0
                ELSE RUNS_CONCEDED / WICKETS
            END AS BOWLING_AVERAGE
FROM
(
    SELECT SEASON,BOWLING_TEAM AS TEAM, COUNT(NAME) AS INNINGS, SUM(BOWL_INNINGS_CAPTAIN) AS CAPTAIN_BOWL_INNINGS, NAME, FULLNAME, SUM(OVER) AS OVER, SUM(BALLS) AS REMAINING_DELIVERIES, 
SUM(OVER)*6 + SUM(BALLS) AS TOTAL_DELIVERIES,MOD(SUM(OVER)*6 + SUM(BALLS),6) AS REMAINING_BALLS, SUM(MAIDENS) AS MAIDENS, SUM(CONCEDED) AS RUNS_CONCEDED, 
SUM(WICKETS) AS WICKETS, SUM(DOTS) AS DOTS, (SUM(CONCEDED)/ (SUM(OVER)*6 + SUM(BALLS))) * 6 AS ECONOMYRATE, SUM(FOURSCONCEDED) AS FOURSCONCEDED, 
SUM(SIXESCONCEDED) AS SIXESCONCEDED, SUM(WIDES) AS WIDES, SUM(NOBALLS) AS NOBALLS FROM
(
    SELECT DENSE_RANK() OVER (PARTITION BY SEASON ORDER BY WICKETS) AS SL_NO, SEASON,BOWLING_TEAM, NAME, FULLNAME, OVERS,OVER,BALLS, MAIDENS, 
    CONCEDED, WICKETS, ECONOMYRATE, DOTS, FOURSCONCEDED, SIXESCONCEDED, WIDES, NOBALLS,
            CASE 
                WHEN CAPTAIN = 'TRUE'
                THEN 1
                ELSE 0
            END AS BOWL_INNINGS_CAPTAIN
     FROM BOWLING1
)
GROUP BY NAME, FULLNAME, SEASON, TEAM ORDER BY SEASON DESC, WICKETS DESC 
) 
)

SELECT * FROM BOWLING_STATS_SEASONWISE

//CAPTAINY STATS BATTING SEASONWISE

CREATE OR REPLACE TABLE CAP_BAT_STATS_SEASONWISE AS 
SELECT SEASON, TEAM, NAME, FULLNAME, CAP_BAT_INNINGS, RUNS, BALLSFACED, CAP_HIGHEST_SCORE, MINUTES,CAST(AVERAGE AS DECIMAL(4,1)) AS AVERAGE, FOURS, SIXES, NOTOUTS, BAT_STRIKERATE,
FIFTIES, CENTURIES FROM
(
SELECT SEASON, TEAM, NAME, FULLNAME, CAP_BAT_INNINGS, RUNS, BALLSFACED, CAP_HIGHEST_SCORE, MINUTES, FOURS, SIXES, NOTOUTS, CAST(BAT_STRIKERATE AS DECIMAL(4,1)) AS BAT_STRIKERATE,
FIFTIES, CENTURIES, 
                            CASE
                                WHEN OUT_INNINGS = 0
                                THEN 0
                                ELSE RUNS / OUT_INNINGS
                            END AS AVERAGE FROM
(
SELECT SEASON, CURRENT_INNINGS AS TEAM, NAME, FULLNAME, COUNT(CAPTAIN) AS CAP_BAT_INNINGS,
SUM(RUNS) AS RUNS, SUM(BALLSFACED) AS BALLSFACED, MAX(RUNS) AS CAP_HIGHEST_SCORE, SUM(MINUTES) AS MINUTES, SUM(FOURS) AS FOURS, SUM(SIXES) AS SIXES, 
SUM(NOTOUTS) AS NOTOUTS, (COUNT(CAPTAIN) - SUM(NOTOUTS)) AS OUT_INNINGS, SUM(FIFTIES) AS FIFTIES, SUM(CENTURIES) AS CENTURIES,
                            CASE
                                WHEN SUM(BALLSFACED) = 0
                                THEN 0
                                ELSE (SUM(RUNS)/SUM(BALLSFACED) * 100)
                            END AS BAT_STRIKERATE
FROM
(
SELECT SEASON,CURRENT_INNINGS, NAME, FULLNAME, CAPTAIN, RUNS, BALLSFACED, MINUTES,  FOURS, SIXES,
                            CASE
                                WHEN ISNOTOUT = 'TRUE'
                                THEN 1
                                ELSE 0
                            END AS NOTOUTS,
                            CASE
                                WHEN RUNS >= 50 AND RUNS < 100
                                THEN 1
                                ELSE 0
                                END AS FIFTIES,
                            CASE
                                WHEN RUNS >= 100
                                THEN 1
                                ELSE 0
                                END AS CENTURIES  
FROM  batting  WHERE CAPTAIN = 'TRUE'                      
)  GROUP BY NAME, FULLNAME, SEASON,CURRENT_INNINGS   ORDER BY SEASON DESC, CAP_BAT_INNINGS DESC 
))

SELECT * FROM CAP_BAT_STATS_SEASONWISE



//CAPTAINCY STATS BOWLING SEASONWISE

CREATE OR REPLACE TABLE CAP_BOWL_STATS_SEASONWISE AS
SELECT SEASON, TEAM, BOWL_CAP_INNINGS, NAME, FULLNAME, TOTAL_DELIVERIES, (TOTAL_DELIVERIES-REMAINING_BALLS) / 6 AS TOTAL_OVERS, REMAINING_BALLS, MAIDENS,  RUNS_CONCEDED,
WICKETS,CAST(BOWLING_AVERAGE AS DECIMAL(4,1)) AS BOWLING_AVERAGE,CAST((RUNS_CONCEDED/TOTAL_DELIVERIES)*6 AS DECIMAL (3,1)) AS ECONOMYRATE,
CAST(BOWLING_STRIKERATE AS DECIMAL(4,1)) AS BOWLING_STRIKERATE, DOTS, FOURSCONCEDED, SIXESCONCEDED, WIDES, NOBALLS
FROM
(
SELECT SEASON, BOWLING_TEAM AS TEAM,COUNT(CAPTAIN) AS BOWL_CAP_INNINGS, NAME, FULLNAME, SUM(OVER) AS OVER, SUM(BALLS) AS BALLS,SUM(OVER)*6+SUM(BALLS) AS TOTAL_DELIVERIES,
MOD((SUM(OVER)*6+SUM(BALLS)),6) AS REMAINING_BALLS, SUM(MAIDENS) AS MAIDENS, SUM(CONCEDED) AS RUNS_CONCEDED, SUM(WICKETS) AS WICKETS,  SUM(DOTS) AS DOTS,
SUM(FOURSCONCEDED) AS FOURSCONCEDED, SUM(SIXESCONCEDED) AS SIXESCONCEDED, SUM(WIDES) AS WIDES, SUM(NOBALLS) AS NOBALLS,
                            CASE
                                WHEN SUM(WICKETS) = 0
                                THEN 0
                                ELSE (SUM(OVER)*6+SUM(BALLS)) / SUM(WICKETS)
                            END AS BOWLING_STRIKERATE,
                            CASE
                                WHEN SUM(WICKETS) = 0
                                THEN 0
                                ELSE SUM(CONCEDED) / SUM(WICKETS)
                            END AS BOWLING_AVERAGE
FROM
(
SELECT SEASON, BOWLING_TEAM,CAPTAIN, NAME, FULLNAME, OVER, BALLS, MAIDENS, CONCEDED, WICKETS, DOTS,FOURSCONCEDED, SIXESCONCEDED, WIDES, NOBALLS FROM BOWLING1
WHERE CAPTAIN = 'TRUE'
)
GROUP BY NAME, FULLNAME, SEASON, BOWLING_TEAM 
) ORDER BY SEASON DESC

SELECT * FROM CAP_BOWL_STATS_SEASONWISE

// SEASONWISE TEAM ANALYSIS //

//A//
CREATE OR REPLACE TABLE TEAM_HOME_SEASONWISE AS
SELECT SEASON, HOME_TEAM AS TEAM, CAST(COUNT(HOME_TEAM)*0.5 AS DECIMAL(4,0)) AS HOME_MATCHES, CAST(SUM(HOME_WINS)*0.5 AS DECIMAL(3,0)) AS HOME_WINS,
MAX(HOME_RUNS) AS HIGHEST_HOME_TOTAL, MIN(HOME_RUNS) AS LOWEST_HOME_TOTAL, CAST(SUM(HOME_BOUNDARIES)*0.5 AS DECIMAL(4,0)) AS HOME_BOUNDARIES FROM
(
SELECT SEASON, HOME_TEAM, HOME_RUNS, HOME_BOUNDARIES,
                CASE
                    WHEN HOME_TEAM = WINNER
                    THEN 1
                    ELSE 0
                END AS HOME_WINS                               
FROM SUMMARY 
) GROUP BY SEASON, HOME_TEAM ORDER BY SEASON DESC, HOME_TEAM

//B//
CREATE OR REPLACE TABLE TEAM_AWAY_SEASONWISE AS
SELECT SEASON, AWAY_TEAM as TEAM, CAST(COUNT(AWAY_TEAM)*0.5 AS DECIMAL(4,0)) AS AWAY_MATCHES, CAST(SUM(AWAY_WINS)*0.5 AS DECIMAL(3,0)) AS AWAY_WINS, 
MAX(AWAY_RUNS) AS HIGHEST_AWAY_TOTAL, MIN(AWAY_RUNS) AS LOWEST_AWAY_TOTAL, CAST(SUM(AWAY_BOUNDARIES)*0.5 AS DECIMAL(4,0)) AS AWAY_BOUNDARIES  FROM
(
SELECT SEASON, AWAY_TEAM, AWAY_RUNS, AWAY_BOUNDARIES, 
                 CASE
                    WHEN AWAY_TEAM = WINNER
                    THEN 1
                    ELSE 0
                END AS AWAY_WINS
FROM SUMMARY
) GROUP BY SEASON, AWAY_TEAM ORDER BY SEASON DESC, AWAY_TEAM

//C//

CREATE OR REPLACE TABLE TEAM_DETAILS_SEASONWISE AS
SELECT SEASON, HOME_TEAM,AWAY_TEAM,  HOME_MATCHES, HOME_WINS,HIGHEST_HOME_TOTAL AS HOME_TOTAL, HIGHEST_AWAY_TOTAL AS AWAY_TOTAL, HOME_WINS AS HOME_WIN, AWAY_WINS AS AWAY_WIN, HOME_BOUNDARIES, AWAY_BOUNDARIES
FROM
(
SELECT SEASON, HOME_TEAM, CAST(COUNT(HOME_TEAM)*0.5 AS DECIMAL(4,0)) AS HOME_MATCHES, CAST(SUM(HOME_WINS)*0.5 AS DECIMAL(3,0)) AS HOME_WINS, 
MAX(HOME_RUNS) AS HIGHEST_HOME_TOTAL, MIN(HOME_RUNS) AS LOWEST_HOME_TOTAL, CAST(SUM(HOME_BOUNDARIES)*0.5 AS DECIMAL(4,0)) AS HOME_BOUNDARIES,
AWAY_TEAM, CAST(COUNT(AWAY_TEAM)*0.5 AS DECIMAL(4,0)) AS AWAY_MATCHES, CAST(SUM(AWAY_WINS)*0.5 AS DECIMAL(3,0)) AS AWAY_WINS, 
MAX(AWAY_RUNS) AS HIGHEST_AWAY_TOTAL, MIN(AWAY_RUNS) AS LOWEST_AWAY_TOTAL, CAST(SUM(AWAY_BOUNDARIES)*0.5 AS DECIMAL(4,0)) AS AWAY_BOUNDARIES
FROM
(
SELECT SEASON, HOME_TEAM, HOME_RUNS, HOME_BOUNDARIES, AWAY_TEAM, AWAY_RUNS, AWAY_BOUNDARIES,
                CASE
                    WHEN HOME_TEAM = WINNER
                    THEN 1
                    ELSE 0
                END AS HOME_WINS,
                 CASE
                    WHEN AWAY_TEAM = WINNER
                    THEN 1
                    ELSE 0
                END AS AWAY_WINS                
FROM SUMMARY 
) GROUP BY SEASON, HOME_TEAM, AWAY_TEAM  ORDER BY SEASON DESC, HOME_TEAM, AWAY_TEAM
)

   

// DROP TABLES //

DROP TABLE TEAM_INFO

DROP TABLE TEAM_HOME_WINS

DROP TABLE TEAM_AWAY_WINS

DROP TABLE HOMEWINS

DROP TABLE HOME_WINS

DROP TABLE FIFTIES

DROP TABLE CENTURIES

DROP TABLE FOURS

DROP TABLE SIXES

DROP TABLE BOWLING_STATISTIC

DROP TABLE CAPTAIN_BOWLSTAT

// TABLES //

SELECT * FROM batting   //1

SELECT * FROM bowling   //2

SELECT * FROM details   //3

SELECT * FROM summary   //4

SELECT * FROM BOWLING1  //5

SELECT * FROM BATTING_STATISTICS    //6 

SELECT * FROM BOWLING_STATISTICS    //7

SELECT * FROM BATTING_STATS_SEASONWISE  //8

SELECT * FROM BOWLING_STATS_SEASONWISE  //9

SELECT * FROM CAP_BAT_STATS_SEASONWISE  //10

SELECT * FROM CAP_BOWL_STATS_SEASONWISE //11

SELECT * FROM CAPTAIN_BATSTAT   //12 

SELECT * FROM CAPTAIN_BOWLSTATS //13

SELECT * FROM IPL_CAPTAIN_STATS //14

SELECT * FROM TEAM_DETAILS  //15

SELECT * FROM TEAM_HOME_SEASONWISE //16

SELECT * FROM TEAM_AWAY_SEASONWISE //17






